public without sharing class DonacionFormWrapper {

	//Default Account
	private static final Id ACCOUNT_ID = Portal_Publico__c.getOrgDefaults().Cuenta_Por_Defecto__c;

	// Contact Fields
	public String firstName {get; set;}
	public String lastName {get; set;}
	public String email {get; set;}
	public String dni {get; set;}
	public String passport {get; set;}
	public String phone {get; set;}
	public String address {get; set;}
	public String location {get; set;}
	public String country {get; set;}
	public String city {get; set;}
	public String postalCode {get; set;}
	public Date birthdate {get; set;}

	// Comprimiso__c Fields
	public Decimal amount {get; set;}
	public String frequency {get; set;}
	public String paymentType {get; set;}
	public String cardType {get; set;}
	public String cbu {get; set;}

	public String cardNumberVisa {get; set;}
	public String cardNumberMaster {get; set;}
	public String cardNumberAmex {get; set;}
	public String cardNumberDinners {get; set;}

	public String paymentChannel {get; set;}

	public DonacionFormWrapper() {
		country = 'AR';
	}

	public Boolean isEmptyCard() {

		return String.isEmpty(cardNumberVisa) && String.isEmpty(cardNumberMaster) && String.isEmpty(cardNumberAmex) && String.isEmpty(cardNumberDinners);
	}

	public Contact buildContact() {

		Contact contact = new Contact();

		contact.LastName = lastName;
		contact.FirstName = firstName;
		contact.Email = email;
		contact.Medio_de_Correspondencia__c = 'Correo Electrónico';
		contact.N_mero_de_Documento__c = String.isEmpty(dni) ? passport : dni;
		contact.HomePhone = phone;
		contact.MailingStreet = address;
		contact.MailingCity = city;
		contact.MailingState = location;
		contact.MailingPostalCode = postalCode;

		contact.OtherStreet = address;
		contact.OtherCity = city;
		contact.OtherState = location;
		contact.OtherPostalCode = postalCode;

		contact.Birthdate = birthdate;
		contact.RecordTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Donante').getRecordTypeId();

		contact.AccountId = ACCOUNT_ID;

		return contact;
	}

	public Compromiso__c buildCompromiso(Contact contact) {

		Compromiso__c compromiso = new Compromiso__c();

		compromiso.Monto_en_pesos__c = amount;
		compromiso.Frecuencia__c = frequency;
		compromiso.Estado__c = 'Activo';

		compromiso.Fecha_de_compromiso__c = Date.today();
		compromiso.Fecha_para_realizar_primer_cobranza__c = Date.today().toStartOfMonth();
		compromiso.Canal_de_Ingreso__c = paymentChannel;

		if (paymentType == DonacionFormController.TARJETA_DE_CREDITO) {

			if (cardType == 'Visa Credito') {
				compromiso.N_mero_de_la_Tarjeta__c = cardNumberVisa;
				compromiso.Forma_de_Pago__c = 'Tarjeta de Crédito';
				compromiso.Tipo_de_tarjeta__c = 'Visa';
			}
			else if (cardType == 'Visa Debito') {
				compromiso.N_mero_de_la_Tarjeta__c = cardNumberVisa;
				compromiso.Forma_de_Pago__c = 'Tarjeta de Débito';
				compromiso.Tipo_de_tarjeta__c = 'Visa Electron (débito)';
			}
			else if (cardType == 'Mastercard') {
				compromiso.Forma_de_Pago__c = 'Tarjeta de Crédito';
				compromiso.Tipo_de_tarjeta__c = 'Mastercard';
				compromiso.N_mero_de_la_Tarjeta__c = cardNumberMaster;
			}
			else if (cardType == 'American Express') {
				compromiso.Forma_de_Pago__c = 'Tarjeta de Crédito';
				compromiso.Tipo_de_tarjeta__c = 'American Express';
				compromiso.N_mero_de_la_Tarjeta__c = cardNumberAmex;
			}
			else if (cardType == 'Diners Club') {
				compromiso.Forma_de_Pago__c = 'Tarjeta de Crédito';
				compromiso.Tipo_de_tarjeta__c = 'Diners';
				compromiso.N_mero_de_la_Tarjeta__c = cardNumberDinners;
			}
		}
		else if (paymentType == DonacionFormController.DEBITO_EN_CUENTA) {

			compromiso.Tipo_de_tarjeta__c = null;
			compromiso.Forma_de_Pago__c = 'Débito en Cuenta';
			compromiso.CBU__c = cbu;
		}

		compromiso.Donante__c = contact.Id;

		return compromiso;
	}

}